scopeName: 'source.skript'
fileTypes: [
    'sk'
]
name: 'Skript'
limitLineLength: true

patterns: [
    { include: '#comment' }
    { include: '#members' }
    { include: '#sections' }
    { include: '#code' }
]

repository:
    comment:
        patterns: [
            {
                begin: '(?<!#)#[^#\\n\\r]{0,1}'
                end: '(\\n|\\r|$)'
                name: 'comment.line.number-sign.skript'
                patterns: [
                    { include: '#comment_text' }
                ]
            }
        ]
    comment_text:
        patterns: [
            {
                begin: '"'
                beginCaptures:
                    0: name: 'punctuation.definition.string.begin'
                end: '"'
                endCaptures:
                    0: name: 'punctuation.definition.string.end'
                name: 'punctuation.reset'
            }
            {
                begin: '`'
                beginCaptures:
                    0: name: 'punctuation.definition.string.begin'
                end: '`'
                endCaptures:
                    0: name: 'punctuation.definition.string.end'
                name: 'punctuation.reset'
            }
        ]
    code:
        comment: 'This can be re-used inside input elements.'
        patterns: [
            { include: '#literals' }
            { include: '#constants' }
            { include: '#variables' }
            { include: '#values' }
            { include: '#expressions' }
            { include: '#effects' }
        ]
    members:
        patterns: [
            { include: '#member_options' }
            { include: '#member_aliases' }
            { include: '#member_variables' }
            { include: '#member_aliases_entry' }
            { include: '#member_event' }
            { include: '#member_command' }
            { include: '#member_command_options' }
            { include: '#member_function' }
        ]
    member_options:
        patterns: [
            {
                match: '^(options)(:)'
                captures:
                    1: name: 'keyword.control.event'
                    2: name: 'punctuation.definition.section.start'
            }
        ]
    member_variables:
        patterns: [
            {
                match: '^(variables)(:)'
                captures:
                    1: name: 'keyword.control.event'
                    2: name: 'punctuation.definition.section.start'
            }
        ]
    member_aliases:
        patterns: [
            {
                match: '^(aliases)(:)'
                captures:
                    1: name: 'keyword.control.event'
                    2: name: 'punctuation.definition.section.start'
            }
        ]
    member_aliases_entry:
        patterns: [
            {
                match: '^(?:\\s+)([\\w ]+) ?(=)([\\w ,]+)\\s*$'
                captures:
                    1: name: 'variable.other.alias'
                    2: name: 'markup.bold'
                    3: patterns: [
                        {
                            match: '\\w+'
                            name: 'entity.name.type.alias'
                        }
                    ]
            }
        ]
    member_event:
        patterns: [
            {
                match: '^(on|at|every) (.+)(:)'
                captures:
                    1: name: 'keyword.control.event'
                    2: name: 'entity.name.function.event'
                    3: name: 'punctuation.definition.section.start'
            }
        ]
    member_function:
        patterns: [
            {
                match: '^(function) (\\w+)\\((.*)\\)\\s*(::) ([\\w ]+)(:)'
                captures:
                    1: name: 'keyword.control' # not .function because it upsets styling
                    2: name: 'entity.name.function'
                    3: patterns: [
                        { include: '#member_function_parameter' }
                    ]
                    5: name: 'entity.name.type.class'
                    6: name: 'punctuation.definition.section.start'
                name: 'meta.function'
            }
            {
                match: '^(function) (\\w+)\\((.+)\\)(:)'
                captures:
                    1: name: 'keyword.control' # not .function because it upsets styling
                    2: name: 'entity.name.function'
                    3: patterns: [
                        { include: '#member_function_parameter' }
                    ]
                    4: name: 'punctuation.definition.section.start'
                name: 'meta.function'
            }
        ]
    member_function_parameter:
        patterns: [
            {
                match: '(\\w+)(:) (\\w+)'
                captures:
                    0: name: 'variable.parameter'
                    1: name: 'variable.other'
                    2: name: 'markup.bold'
                    3: name: 'entity.name.type.class'
            }
        ]
    member_command:
        patterns: [
            {
                begin: '^command'
                beginCaptures:
                    0: name: 'keyword.control.command'
                end: ':'
                endCaptures:
                    0: name: 'punctuation.definition.section.start'
                name: 'meta.command'
                patterns: [
                    { include: '#member_command_name' }
                    { include: '#member_command_argument' }
                ]
            }
        ]
    member_command_name:
        patterns: [
            {
                match: '(?<!<)(/)?(\\w+)'
                captures:
                    1: name: 'markup.bold'
                    2: name: 'entity.name.function.command'
            }
        ]
    member_command_argument:
        patterns: [
            {
                match: '(<)(.+?)(>)'
                captures:
                    1: name: 'markup.bold'
                    2: name: 'variable.other'
                    3: name: 'markup.bold'
            }
            {
                match: '(\\[<)(.+?)(>\\])'
                captures:
                    1: name: 'markup.bold'
                    2: name: 'variable.other'
                    3: name: 'markup.bold'
            }
        ]
    member_command_options:
        patterns: [
            {
                match: '(cooldown): (.+)'
                captures:
                    1: name: 'keyword.other'
                    2: patterns: []
            }
            {
                match: '(executable by): (.+)'
                captures:
                    1: name: 'keyword.other'
                    2: name: 'entity.name.type.alias'
            }
            {
                match: '(description|cooldown message|(?:no )?permission message): (.+)'
                captures:
                    1: name: 'keyword.control'
                    2:
                        name: 'string.unquoted'
                        patterns: [
                            { include: '#literal_string_inputs' }
                        ]
            }
            {
                match: '(aliases): (.+)'
                captures:
                    1: name: 'keyword.control'
                    2: patterns: [
                        { include: '#member_command_name' }
                    ]
            }
            {
                match: '(usage): (.+)'
                captures:
                    1: name: 'keyword.control'
                    2: patterns: [
                        { include: '#member_command_name' }
                        { include: '#member_command_argument' }
                    ]
            }
            {
                match: '(permission|cooldown bypass): (.+)'
                captures:
                    1: name: 'keyword.control'
                    2: patterns: [
                        { include: '#member_command_permission' }
                    ]
            }
            {
                match: '(cooldown storage): (.+)'
                captures:
                    1: name: 'keyword.control'
                    2: patterns: [
                        { include: '#variables' }
                    ]
            }
            {
                match: '(trigger):'
                captures:
                    1: name: 'keyword.control'
            }
        ]
    member_command_permission:
        patterns: [
            {
                match: '([\\w]+)'
                captures:
                    1: name: 'variable.other.permission'
            }
            {
                match: '(?<=\\w)(\\.)([\\w*]+)'
                captures:
                    1: name: 'markup.bold'
                    2: name: 'variable.other.permission'
            }
        ]
    sections:
        patterns: [
            { include: '#section_if' }
            { include: '#section_loop' }
            { include: '#section_while' }
        ]
    section_if:
        patterns: [
            {
                match: '^(?:\\s+)((?:else )?if) (.+)(:)'
                captures:
                    0: name: 'meta.section'
                    1: name: 'keyword.control'
                    2: patterns: [
                        { include: '#code' }
                    ]
                    3: name: 'punctuation.definition.section.start'
            }
            {
                match: '^(?:\\s+)(else)(:)'
                captures:
                    0: name: 'meta.section'
                    1: name: 'keyword.control'
                    2: name: 'punctuation.definition.section.start'
            }
        ]
    section_loop:
        patterns: [
            {
                match: '^(?:\\s+)(loop) (.+)(:)'
                captures:
                    0: name: 'meta.section'
                    1: name: 'keyword.control'
                    2: patterns: [
                        { include: '#code' }
                    ]
                    3: name: 'punctuation.definition.section.start'
            }
        ]
    section_while:
        patterns: [
            {
                match: '^(?:\\s+)(while) (.+)(:)'
                captures:
                    0: name: 'meta.section'
                    1: name: 'keyword.control'
                    2: patterns: [
                        { include: '#code' }
                    ]
                    3: name: 'punctuation.definition.section.start'
            }
        ]
    constants:
        patterns: [
            {
                match: "\\b(none|null|false|true)\\b"
                captures:
                    0: name: 'variable.other.constant.skript'
            }
        ]
    keywords:
        patterns: [
            {
                match: "\\b(return|stop|if|else|loop|while)\\b"
                captures:
                    0: name: 'keyword.control'
            }
        ]
    variables:
        patterns: [
            { include: '#variable_option' }
            {
                begin: '({)(_)'
                beginCaptures:
                    1: name: 'markup.bold'
                    2: name: 'markup.underline'
                end: '(})'
                endCaptures:
                    1: name: 'markup.bold'
                patterns: [
                    { include: '#input' }
                    { include: '#variable_list_separator' }
                ]
                name: 'variable.other.local'
            }
            {
                begin: '({)'
                beginCaptures:
                    1: name: 'markup.bold'
                end: '(})'
                endCaptures:
                    1: name: 'markup.bold'
                patterns: [
                    { include: '#input' }
                    { include: '#variable_list_separator' }
                ]
                name: 'variable.other'
            }
        ]
    variable_list_separator:
        patterns: [
            {
                match: "(::\\*)(?=})"
                captures:
                    0: name: 'punctuation.separator.variable'
                    1: name: 'markup.bold'
            }
            {
                match: "(::)"
                captures:
                    0: name: 'punctuation.separator.variable'
                    1: name: 'markup.bold'
            }
        ]
    variable_option:
        patterns: [
            {
                begin: '({)(@)'
                beginCaptures:
                    1: name: 'markup.bold'
                    2: name: 'markup.underline'
                end: '(})'
                endCaptures:
                    1: name: 'markup.bold'
                patterns: [
                    { include: '#input' }
                ]
                name: 'variable.other.option'
            }
        ]
    literals:
        patterns: [
            { include: '#literal_permission' }
            { include: '#literal_string' }
            { include: '#literal_number' }
            { include: '#literal_colour' }
        ]
    literal_permission:
        patterns: [
            {
                begin: 'permission (")'
                beginCaptures:
                    1: name: 'punctuation.definition.string.begin'
                end: '"'
                endCaptures:
                    0: name: 'punctuation.definition.string.end'
                patterns: [
                    { include: '#member_command_permission' }
                    { include: '#literal_string_inputs' }
                ]
            }
        ]
    literal_string:
        patterns: [
            {
                begin: '"'
                beginCaptures:
                    0: name: 'punctuation.definition.string.begin'
                end: '"'
                endCaptures:
                    0: name: 'punctuation.definition.string.end'
                name: 'string.quoted.double'
                patterns: [
                    { include: '#literal_string_inputs' }
                ]
            }
        ]
    literal_number:
        patterns: [
            {
                match: '\\b[0-9]+\\.[0-9]+\\b'
                name: 'constant.numeric.decimal'
            }
            {
                match: '\\b[0-9]+\\b'
                name: 'constant.numeric.decimal'
            }
        ]
    literal_string_inputs:
        patterns: [
            { include: '#variable_option' }
            { include: '#literal_string_code' }
            { include: '#literal_string_markup' }
            { include: '#input' }
        ]
    literal_string_code:
        patterns: [
            {
                match: '&[A-Fa-f0-9kLlLmMnNoOrR]'
                captures:
                    0: name: 'keyword.type.colour'
            }
        ]
    literal_string_markup:
        patterns: [
            {
                match: '<(##)[A-Fa-f0-9]{3,6}>'
                captures:
                    0: name: 'keyword.type.markup'
                    1: name: 'markup.bold'
            }
            {
                match: '<(bold|italic|underline|strikethrough|magic|reset)>'
                captures:
                    0: name: 'keyword.type.markup'
            }
            {
                match: '<(black|(?:dark )?(?:blue|green|aqua|red|purple|gr[ae]y)|cyan|gold|orange|yellow|white|magenta|light (?:gr[ae]y|green|purple)?)>'
                captures:
                    0: name: 'keyword.type.markup'
            }
        ]
    literal_string_link:
        patterns: [
            {
                match: 'https?://[^\\s"]+'
                captures:
                    0: name: 'markup.underline'
            }
            {
                match: '<(bold|italic|underline|strikethrough|magic|reset)>'
                captures:
                    0: name: 'keyword.type.markup'
            }
            {
                match: '<(black|(?:dark )?(?:blue|green|aqua|red|purple|gr[ae]y)|cyan|gold|orange|yellow|white|magenta|light (?:gr[ae]y|green|purple)?)>'
                captures:
                    0: name: 'keyword.type.markup'
            }
        ]
    input:
        patterns: [
            {
                begin: '(%)'
                beginCaptures:
                    0: name: 'punctuation.definition.input.begin'
                    1: name: 'markup.bold'
                end: '(%)'
                endCaptures:
                    0: name: 'punctuation.definition.input.end'
                    1: name: 'markup.bold'
                name: 'punctuation.reset' # this resets the colour
                patterns: [
                    { include: '#code' }
                ]
            }
        ]
    values:
        patterns: [
            {
                comment: 'type-value-1'
                match: '(event|loop|arg)(-)([\\w]+)(-)([\\d]+)'
                captures:
                    1: name: 'variable.other'
                    2: name: 'markup.bold'
                    3: name: 'entity.name.type.class'
                    4: name: 'markup.bold'
                    5: name: 'constant.numeric'
            }
            {
                comment: 'arg-1'
                match: '(arg)(-)([\\w]+)(-)([\\d]+)'
                captures:
                    1: name: 'variable.other'
                    2: name: 'markup.bold'
                    5: name: 'constant.numeric'
            }
            {
                comment: 'type-value'
                match: '(event|loop|arg)(-)([\\w]+)'
                captures:
                    1: name: 'variable.other'
                    2: name: 'markup.bold'
                    3: name: 'entity.name.type.class'
            }
        ]
    expressions:
        comment: 'Used to catch any key expressions that need formatting.'
        patterns: [
            { include: '#expression_function_use' }
        ]
    expression_function_use:
        patterns: [
            {
                begin: '\\b(\\w+)\\('
                beginCaptures:
                    1: name: 'entity.name.function'
                end: '\\)'
                patterns: [
                    { include: '#code' }
                ]
            }
        ]
    effects:
        comment: 'Used to catch any key effects that need formatting.'
        patterns: [
            { include: '#effect_stop' }
        ]
    effect_stop:
        patterns: [
            {
                match: '^(?:\\s+)(stop|cancel|return|exit)'
                captures:
                    1: name: 'markup.strike'
            }
        ]
